from timeit import default_timer

# ===========================================================
# PROBLEM 8 -- Largest product in a series
# ===========================================================
#
# The four adjacent digits in the 1000-digit number that have
# the greatest product 9x9x8x9 = 5832.
#
#   73167176531330624919225119674426574742355349194934
#   96983520312774506326239578318016984801869478851843
#   85861560789112949495459501737958331952853208805511
#   12540698747158523863050715693290963295227443043557
#   66896648950445244523161731856403098711121722383113
#   62229893423380308135336276614282806444486645238749
#   30358907296290491560440772390713810515859307960866
#   70172427121883998797908792274921901699720888093776
#   65727333001053367881220235421809751254540594752243
#   52584907711670556013604839586446706324415722155397
#   53697817977846174064955149290862569321978468622482
#   83972241375657056057490261407972968652414535100474
#   82166370484403199890008895243450658541227588666881
#   16427171479924442928230863465674813919123162824586
#   17866458359124566529476545682848912883142607690042
#   24219022671055626321111109370544217506941658960408
#   07198403850962455444362981230987879927244284909188
#   84580156166097919133875499200524063689912560717606
#   05886116467109405077541002256983155200055935729725
#   71636269561882670428252483600823257530420752963450
#
# Find the thirteen adjacent digits in the 1000-digit number
# that have the greatest product. what is the value of this
# product?
#
# ===========================================================
def problem_8( ):
    # Print Problem Context
    print( "Project Euler Problem 8 -- Largest Product in a Series" )

    # Set Up Variables
    start_time        =  default_timer( )
    bigNumStr         =  "73167176531330624919225119674426574742355349194934"
    bigNumStr        +=  "96983520312774506326239578318016984801869478851843"
    bigNumStr        +=  "85861560789112949495459501737958331952853208805511"
    bigNumStr        +=  "12540698747158523863050715693290963295227443043557"
    bigNumStr        +=  "66896648950445244523161731856403098711121722383113"
    bigNumStr        +=  "62229893423380308135336276614282806444486645238749"
    bigNumStr        +=  "30358907296290491560440772390713810515859307960866"
    bigNumStr        +=  "70172427121883998797908792274921901699720888093776"
    bigNumStr        +=  "65727333001053367881220235421809751254540594752243"
    bigNumStr        +=  "52584907711670556013604839586446706324415722155397"
    bigNumStr        +=  "53697817977846174064955149290862569321978468622482"
    bigNumStr        +=  "83972241375657056057490261407972968652414535100474"
    bigNumStr        +=  "82166370484403199890008895243450658541227588666881"
    bigNumStr        +=  "16427171479924442928230863465674813919123162824586"
    bigNumStr        +=  "17866458359124566529476545682848912883142607690042"
    bigNumStr        +=  "24219022671055626321111109370544217506941658960408"
    bigNumStr        +=  "07198403850962455444362981230987879927244284909188"
    bigNumStr        +=  "84580156166097919133875499200524063689912560717606"
    bigNumStr        +=  "05886116467109405077541002256983155200055935729725"
    bigNumStr        +=  "71636269561882670428252483600823257530420752963450"
    greatest_product  =  1

    # Primary Computation, gather a 13 digit substring,
    # compute the product of digits,
    # and determine if it's greater than the current max
    for n in range( len( bigNumStr ) - 13 ):
        # Gather 13-digit subset
        subset           =  bigNumStr[ n : ( n + 13 ) ]
        current_product  =  1

        # Compute Product of Digits
        for digit in subset:
            current_product  *=  int( digit )
            continue  # added for readability

        # Store Greatest Product
        greatest_product  =  max( current_product , greatest_product )
        continue  # added for readability

    # Compute Execution Time
    end_time        =  default_timer( )
    execution_time  =  ( end_time - start_time ) * 1000

    # Display the Results
    print( "   Greatest product of any 13 adjacent digits in the number:   %d"      %  greatest_product )
    print( "   Computation Time:                                           %.3fms"  %  execution_time )
    return



if __name__ == '__main__':
    problem_8( )
